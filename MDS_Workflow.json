{
  "name": "MDS Workflow",
  "nodes": [
    {
      "parameters": {
        "options": {}
      },
      "id": "2c97d0f3-49a6-474e-af12-05b68ea08120",
      "name": "When chat message received",
      "type": "@n8n/n8n-nodes-langchain.chatTrigger",
      "typeVersion": 1.1,
      "position": [
        140,
        320
      ],
      "webhookId": "a889d2ae-2159-402f-b326-5f61e90f602e"
    },
    {
      "parameters": {
        "content": "## Start by saying 'hi'\n![Button](https://i.imgur.com/PrIBJI6.png)",
        "height": 149,
        "width": 150
      },
      "id": "330f5417-be02-4497-bcef-563aadfb4269",
      "name": "Sticky Note",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -120,
        220
      ]
    },
    {
      "parameters": {
        "model": "o3-mini",
        "options": {}
      },
      "id": "81e54efd-1c73-4e61-9445-efca7a11ddd3",
      "name": "OpenAI Model",
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1,
      "position": [
        620,
        400
      ],
      "credentials": {
        "openAiApi": {
          "id": "70pK8Uc9sjMG7WxB",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=A user has posted a question in the Amazon sellers Facebook group. Your task is to write a single, helpful Facebook comment that answers their question based on the provided context.\n\n# TASK WORKFLOW:\n\n1.  **Analyze:** Read the `user_question` to fully understand their problem.\n2.  **Evaluate:** Review the `retrieved_context` posts. Identify the 1-2 most relevant posts that directly address the user's question.\n3.  **Synthesize and Cite:** Write a concise, 2-4 sentence answer that synthesizes the key insights from the most relevant posts. As you write, naturally weave in the URLs of the source posts you used, formatted as `[descriptive text](URL)`.\n4.  **Add a Concluding Remark:** As your final sentence, add a friendly and natural reminder encouraging the user to explore the linked threads for more information. This reinforces that the links contain valuable, in-depth community knowledge.\n\n# IMPORTANT REMINDERS:\n* **Be Natural:** Your entire comment should feel like a peer offering advice. Avoid robotic lead-ins like \"Based on the context...\"\n* **Concluding Remark Tone:** Phrase the final sentence conversationally.\n    * **Good Example:** \"The threads I linked have more great suggestions, definitely worth a read!\"\n    * **Good Example:** \"Definitely check out those posts for the full conversationâ€”lots of good nuggets in there.\"\n    * **Bad Example:** \"For a more reliable answer, check these posts.\" (This undermines your own summary).\n\n# DYNAMIC DATA:\n\n### User's Question:\n\"{{$json['chatInput']}}\"",
        "options": {
          "systemMessage": "=You are an AI assistant with the persona of a seasoned and successful Amazon seller who is a helpful member of an eCommerce Facebook group called MDS (Million Dollar Sellers). Your goal is to provide clear, actionable, and community-minded advice that feels like it's from a peer, not a robot. Refer to facebook posts as post not thread. Feel free to mention by name too.\n\n# CORE BEHAVIOR & RULES:\n\n1.  **Persona:** You are friendly, encouraging, and professional. You write in a natural, conversational style suitable for a Facebook comment.\n2.  **Citation Method:** When you reference information from retrieved posts, you MUST cite the source using Markdown links: `[descriptive text](URL)`.\n3.  **Forbidden Phrases:** Under no circumstances will you use phrases like \"According to a previous post,\" \"Based on the retrieved context,\" or \"As a large language model...\". The process of checking the knowledge base must be invisible to the user.\n4.  **Constraints:**\n    - **Length:** Your final reply must be between 2 and 5 sentences.\n    - **Originality:** Never copy text verbatim from the context. Always synthesize the information to create a new, helpful message.\n    - **Credibility:** Do not invent facts, product names, or URLs. If no provided context is relevant, simply answer the question from your general knowledge base without making up a source.\n\n# QUALITY STANDARD (Example of Ideal Output):\n\nThis is the standard of quality you must always adhere to.\n\n-   **Example User Question:** \"My new product's main image keeps getting suppressed. I'm positive it has a pure white background and it's 1200x1200px. What else could it be? I'm stuck.\"\n-   **Example Retrieved Context:** `[{\"url\": \"https://facebook.com/.../101\", \"content\": \"Amazon is super strict about having ZERO extra text, badges, or logos on the main image...\"}, {\"url\": \"https://facebook.com/.../202\", \"content\": \"I realized my product was touching the very edge of the frame. You need to have some white space padding...\"}]`\n-   **Example of a Perfect Comment:** \"That's a common and frustrating problem! Besides the white background, Amazon often suppresses images that have any extra text or promotional badges on them, as mentioned in [this helpful discussion](https://facebook.com/.../101). Another thing to check is that your product isn't touching the edge of the frame; sometimes a lack of whitespace can trigger suppression, which is a great point from [another post](https://facebook.com/.../202). Hope that helps!\""
        }
      },
      "id": "f0ba889c-ddfa-434f-bd54-108182f340cf",
      "name": "Agent",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.7,
      "position": [
        660,
        60
      ],
      "retryOnFail": true,
      "maxTries": 2
    },
    {
      "parameters": {
        "model": "text-embedding-3-large",
        "options": {
          "dimensions": 3072
        }
      },
      "type": "@n8n/n8n-nodes-langchain.embeddingsOpenAi",
      "typeVersion": 1.2,
      "position": [
        1000,
        440
      ],
      "id": "f8f6765f-25c3-4dd2-88ab-27b85e8d0b62",
      "name": "Embeddings OpenAI1",
      "credentials": {
        "openAiApi": {
          "id": "70pK8Uc9sjMG7WxB",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {},
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "typeVersion": 1.3,
      "position": [
        780,
        400
      ],
      "id": "00c12c07-7d1f-4543-98cb-ae514ceeccde",
      "name": "n8n Memory"
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "ask",
        "responseMode": "responseNode",
        "options": {
          "rawBody": false
        }
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        0,
        0
      ],
      "id": "15e39f56-3eb7-46eb-9fd2-59c4ce8151f8",
      "name": "Webhook",
      "webhookId": "4a763fed-0c36-4fc3-b165-916e166238ff"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "aaedd89e-d517-44c6-84bf-7020b137fff5",
              "name": "sessionId",
              "value": "={{  $json[\"body\"][\"sessionId\"] }}",
              "type": "string"
            },
            {
              "id": "d0d903df-101b-4960-8ff6-1ed28ae9db78",
              "name": "action",
              "value": "={{  $json[\"body\"][\"action\"] }}",
              "type": "string"
            },
            {
              "id": "a0436e6f-50bc-46ad-b695-c1dcddfff563",
              "name": "=chatInput",
              "value": "={{ $json[\"body\"][\"q\"]}}",
              "type": "string"
            },
            {
              "id": "3ec26be1-c5c0-4f58-a4de-a1b20a6e1792",
              "name": "",
              "value": "",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        300,
        0
      ],
      "id": "7d2bec8d-0c7c-4f08-a630-fbab2fe924a7",
      "name": "Edit Fields"
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ $json.toJsonString($json.output)}}",
        "options": {}
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.4,
      "position": [
        1300,
        20
      ],
      "id": "8db098b3-77b8-4487-a55f-536875e06c98",
      "name": "Respond to Webhook"
    },
    {
      "parameters": {
        "mode": "retrieve-as-tool",
        "toolName": "fb_group_data",
        "toolDescription": "Retrieve the fb-group-data vector store to get best context about the users' question.",
        "pineconeIndex": {
          "__rl": true,
          "value": "fb-group-data",
          "mode": "list",
          "cachedResultName": "fb-group-data"
        },
        "topK": 5,
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.vectorStorePinecone",
      "typeVersion": 1.2,
      "position": [
        1060,
        300
      ],
      "id": "27eee3f3-aec2-4a18-888f-c49eb0942d29",
      "name": "Pinecone Vector Store",
      "credentials": {
        "pineconeApi": {
          "id": "rkqbXGpmjPXXVnLn",
          "name": "PineconeApi account"
        }
      }
    }
  ],
  "pinData": {},
  "connections": {
    "When chat message received": {
      "main": [
        [
          {
            "node": "Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Model": {
      "ai_languageModel": [
        [
          {
            "node": "Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Embeddings OpenAI1": {
      "ai_embedding": [
        [
          {
            "node": "Pinecone Vector Store",
            "type": "ai_embedding",
            "index": 0
          }
        ]
      ]
    },
    "n8n Memory": {
      "ai_memory": [
        [
          {
            "node": "Agent",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "Webhook": {
      "main": [
        [
          {
            "node": "Edit Fields",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields": {
      "main": [
        [
          {
            "node": "Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Agent": {
      "main": [
        [
          {
            "node": "Respond to Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Pinecone Vector Store": {
      "ai_tool": [
        [
          {
            "node": "Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "c11146e3-5a96-484c-b92e-9d96b20c6285",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "42b0101080bd0d0b4c368de6e7b7540d1f1f93adf8c9da08915b45653da3e05a"
  },
  "id": "NPctMgggH3wE8DXH",
  "tags": []
}